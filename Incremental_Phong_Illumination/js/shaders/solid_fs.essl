Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	varying vec2 tex;
	varying vec4 wNormal4;
	varying vec3 wPos;
	varying vec4 viewDir;
	uniform sampler2D colorTexture;
	
	uniform vec4 wLightPos;
	uniform mat4 rayDirMatrix;
	uniform vec3 eye;
	
	const vec3 ambientColor = vec3(0.2, 0.0, 0.0);
	const vec3 diffuseColor = vec3(0.55, 0.0, 0.0);
	const vec3 specColor = vec3(1.0, 1.0, 1.0);
	const float shininess = 100.0;
	const float screenGamma = 2.2; // Assume the monitor is calibrated to the sRGB color space
	
	const float reflectionLevel = 0.2;
	
	int mode = 2;
	
	uniform samplerCube envMapTexture;

	void main(void) {
		vec3 wNormal = normalize(wNormal4.xyz);
		//vec3 lightDir = normalize(wLightPos.xyz - wPos);
		//float cosResult = max(dot(wNormal ,lightDir), 0.0);
		//gl_FragColor = vec4(texture2D(colorTexture, tex).xyz * cosResult, 1);
		//gl_FragColor = vec4(textureCube( envMapTexture, reflect(normalize(viewDir).xyz, wNormal )).xyz * cosResult, 1);
		//gl_FragColor += vec4(normalize(wNormal.xyz), 1) * 0.0;
		
		vec3 normal = normalize(wNormal4.xyz);
		vec3 lightDir = normalize(wLightPos.xyz - wPos);

		  float lambertian = max(dot(lightDir,normal), 0.0);
		  float specular = 0.0;

		  vec3 colorLinear = ambientColor;
		  if(lambertian > 0.0) {

			vec3 viewDir3 = normalize(eye - wPos);

			// this is blinn phong
			vec3 halfDir = normalize(lightDir + viewDir3);
			float specAngle = max(dot(halfDir, normal), 0.0);
			specular = pow(specAngle, shininess);
			   
			// this is phong (for comparison)
			if(mode == 2) {
			  vec3 reflectDir = reflect(-lightDir, normal);
			  specAngle = max(dot(reflectDir, viewDir3), 0.0);
			  // note that the exponent is different here
			  specular = pow(specAngle, shininess/4.0);
			}
		  }
		  vec3 reflectedColour = textureCube( envMapTexture, reflect(normalize(viewDir).xyz, wNormal )).xyz;
		  colorLinear += lambertian * diffuseColor;
		  colorLinear = mix(colorLinear, reflectedColour, reflectionLevel);
		  
		  colorLinear += specular * ( specColor );
		  // apply gamma correction (assume ambientColor, diffuseColor and specColor
		  // have been linearized, i.e. have no gamma correction in them)
		  vec3 colorGammaCorrected = pow(colorLinear, vec3(1.0/screenGamma));
		  // use the gamma corrected color in the fragment
		  
		  gl_FragColor = vec4(colorGammaCorrected, 1.0);

	}
`;