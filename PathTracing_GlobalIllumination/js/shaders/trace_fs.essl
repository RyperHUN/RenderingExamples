Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	
	varying vec2 tex;
	varying vec4 rayDir;
	uniform vec3 cameraPos;
	
	uniform samplerCube background; 
	uniform sampler2D prevImage;
	uniform sampler2D randomTex;
	
	uniform float contribTex;
	uniform float frameCount;
	
	#define QuadricsNum 10
	#define MaterialsNum 5
	uniform mat4 quadrics[QuadricsNum];
	uniform vec4 materials[MaterialsNum];
	
	float random (vec3 scale, float seed)
	{
		return texture2D(randomTex, seed * tex).g;
	}
	/*
	float random(vec3 scale, float seed) {
     return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);
	}
	*/
	/*
	float random(vec3 scale, float seed){
		return fract(sin(dot(scale.xy ,vec2(12.9898,78.233))) * 43758.5453);
	}
	*/
	/*
	float random(vec3 scale, float seed) 
	{
		return texture2D(randomTex,(gl_FragCoord.xy + vec2(seed)) * scale.xy).x;
     //return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);
	}
	*/
	vec3 lightPos = vec3(1,3,-2);
	vec3 lightEmission = vec3(5,5,5);
	float scale = 1.0;
	float intersectLight(vec3 e, vec3 d, inout vec3 contrib, inout bool isHit)
	{
		vec3 eye = e.xyz;
		vec3 v = d.xyz;
		vec3 pos = lightPos;
		vec3 r1 = vec3(-1, 0, 1)*scale + pos;
		vec3 r2 = vec3( 1, 0, 1)*scale + pos;
		vec3 r3 = vec3( 1, 0,-1)*scale + pos;
		vec3 r4 = vec3(-1, 0,-1)*scale + pos;
		vec3 n = normalize(cross(r2-r1,r4-r1));
		//if (dot(d.xyz,n) < 0.0)
		//	n = -n;
		float t = dot((r1 - eye),n) / (dot(v,n));
		if (t < 0.0)
			return -1.0;
		
		vec3 hitPos = eye + v * t;
		
		if (dot(cross((r2-r1),(hitPos-r1)), n) > 0.0 &&
			dot(cross((r3-r2),(hitPos-r2)), n) > 0.0 &&
			dot(cross((r4-r3),(hitPos-r3)), n) > 0.0 &&
			dot(cross((r1-r4),(hitPos-r4)), n) > 0.0)
		{
			isHit = true;
			return t;
		}
		return -1.0;
	}
	float GetRandom(float seed)
	{
		return random(vec3(12.9898, 78.233, 151.7182), seed);
	}
	float getRandomX(float seed)
	{
		return random(vec3(12.9898, 78.233, 151.7182), seed);
	}
	float getRandomY(float seed)
	{
		return random(vec3(63.7264, 10.873, 623.6736), seed) * 20.0;
	}
	vec3 sampleCosine(float seed, vec3 normal) {
		float u = getRandomX(seed);
		float v = getRandomY(seed);
		float r = sqrt(u);
		float angle = 6.283185307179586 * v * 20.0;
		// compute basis from normal
		vec3 sdir, tdir;
		if(abs(normal.y) > 0.999)
            sdir = normalize(cross(normal, vec3(0,0,-1)));
        else
            sdir = normalize(vec3(-normal.z,0,normal.x));
		tdir = cross(normal, sdir);
		return r*cos(angle)*sdir + r*sin(angle)*tdir + sqrt(1.-u)*normal;
   }
   vec3 randomOnLightSource ()
   {
	   vec2 randomPoint = vec2(getRandomX (frameCount), getRandomY (frameCount));
	   randomPoint = mod(randomPoint, 2.0);
	   randomPoint = randomPoint - vec2(1.0);
	   randomPoint = randomPoint * scale;
	   vec3 finalLightPos = vec3(randomPoint.x, 0.0, randomPoint.y);
	   finalLightPos += lightPos;
	   return finalLightPos;
   }
	float intersectClippedQuadric(mat4 A, mat4 B, vec4 e, vec4 d) 
	{
		float a = dot( d, A * d);
        float b = dot( e, A * d) + dot(d, A * e );
        float c = dot( e, A * e );
   
        float discr = b * b - 4.0 * a * c;
        if ( discr < 0.0 ) //Not hit
          return -1.0;
        float sqrt_discr = sqrt( discr );
        float t1 = (-b + sqrt_discr)/2.0/a;
        float t2 = (-b - sqrt_discr)/2.0/a;
		
		vec4 b1 = e + t1 *d;
		vec4 b2 = e + t2 * d; // Ezzel megkapom a pontot konkretan
		
		//Most jon az implicit behelyettesites
		float bt1 = dot(b1, B * b1);
		float bt2 = dot(b2, B * b2);
		
		if (bt1 > 0.0)
			t1 = -1.0;
		if(bt2 > 0.0)
			t2 = -1.0;
		
		// számítsuk ki a két metszéspontot
        // ha hit1 nincs B-ben, t1=-1
        // ha hit2 nincs B-ben, t2=-1
   
        float t = (t1<t2)?t1:t2;
        if(t < 0.0)
          t = (t1<t2)?t2:t1;
        return t;
      }
	  
	vec3 getQuadricNormal(mat4 A, vec4 hit, vec4 d)
	{
		vec3 normal = normalize((A*hit + hit*A).xyz); //Gradiens szamolas MAGIC
		if (dot(d.xyz,normal) > 0.0)
			normal = -normal;  //Normal towards us
			
		return normal;
	}
	float intersectQuadric (vec4 e, vec4 d, inout mat4 bestQuadric, inout vec4 bestMaterial)
	{
		float bestT = 10000.0;
		for(int i=0; i<QuadricsNum/2; i++) {
		  float t = intersectClippedQuadric(quadrics[2*i], quadrics[2*i+1], e, d);
		  if(t > 0.0 && t < bestT) {
			bestT = t;
			bestQuadric = quadrics[2*i];
			bestMaterial = materials[i];
		  }
		}
		return bestT;
	}
	//inout csak valtozot lehet atadni
	//Contrib hogy hany % at veri vissza!
	vec3 trace(inout vec4 e, inout vec4 d, inout vec3 contrib, float iterationNum)
   {
		vec4 bestMaterial;
		mat4 bestQuadric;
		float bestT = intersectQuadric (e, d, bestQuadric, bestMaterial);
		
		vec3 result = vec3(0.0);
		{
			bool isHit = false;
			float t = intersectLight (e.xyz, d.xyz, contrib, isHit);
			if (isHit && t < bestT)
			{
				bestT = t;
				result = lightEmission; // emission
				contrib = vec3(0.0);
				if(iterationNum < 0.5)
					return result;
				else
					return vec3(0.0);
			}
		}
		if(bestT > 9999.0) {
		    vec3 result = contrib * textureCube(background, d.xyz).rgb * 0.0;
			contrib = vec3(0.0);
			return result;
		} //Ha sohasem volt metszespont akkor a hatteret latjuk
			
		vec4 hit = e + d*bestT;
		vec3 normal = getQuadricNormal(bestQuadric, hit, d);

		e = hit + vec4(normal, 0.0) * 0.001; // kicsit kitol.
		//d.xyz = reflect(d.xyz, +normal);
		
		vec3 reflectedRay = mix(sampleCosine (frameCount * (iterationNum + 1.0), normal),reflect(d.xyz, normal),bestMaterial.w);
		
		d.xyz = reflectedRay;
		result+= vec3(0,0,0) * contrib;
		contrib *= mix(bestMaterial.xyz * 3.14, vec3(1.0), bestMaterial.w);//kd * pi
		
		//////////////////////////////////////////
		///Light calculation
		{
			vec3 randomLightPoint = randomOnLightSource ();
			vec3 shadowDir = normalize(randomLightPoint - e.xyz);
			float lightDist = length(randomLightPoint - e.xyz);
			vec4 shadowDir4 = vec4(shadowDir, 0.0);
			bool isHit = false;
			float t = intersectLight (e.xyz, shadowDir, contrib, isHit); // light T
			float quadricT = intersectQuadric (e, shadowDir4, bestQuadric, bestMaterial);
			vec3 shadowNormal = getQuadricNormal (bestQuadric, e + shadowDir4*quadricT, shadowDir4);
			if (isHit && t <= lightDist && quadricT > t)
			{
				float geometriaiFaktor = max(0.0, dot(shadowDir, normal)) * max(0.0, dot(vec3(0,-1,0),-shadowDir));
				vec3 lightResult =  (contrib * lightEmission / (lightDist * lightDist / 2.5)) * geometriaiFaktor; // emission
				result = mix(lightResult, result, bestMaterial.w);
				//contrib = vec3(0.0); // szorozva felulet reflektanciaval
				///TODO Ha ezt belerakom csunya kep
			}
		}
		return result;
	}
	

	void main() { 
		  vec4 d = vec4(normalize(rayDir.xyz), 0.0);
		  vec4 e = vec4(cameraPos, 1.0);
		  e += GetRandom(frameCount)/ 80.0;
		  
		    vec4 outColor = vec4(0.0, 0.0, 0.0, 1.0);
			vec3 contrib = vec3(1.0);
			for(int iReflection=0; iReflection<5; iReflection++)
			{
			  outColor.xyz += trace(e, d, contrib, float(iReflection));
			  if(length(contrib) < 0.05)
				break;
			} 

			gl_FragColor = mix(texture2D(prevImage, tex), outColor, 1.0 / frameCount);
	       //gl_FragColor = mix(prevImage, outColor, 1.0 / frameCount);
           //gl_FragColor = outColor * contribTex + texture2D(prevImage, tex) * (1.0 - contribTex);
		   //float contrib = 1.0;
		   //gl_FragColor = vec4(trace(e, d, contrib), 1.0);
		} 

	
	

`;